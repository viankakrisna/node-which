{"version":3,"file":"which.module.js","sources":["../src/which.js"],"sourcesContent":["const isWindows =\n  process.platform === \"win32\" ||\n  process.env.OSTYPE === \"cygwin\" ||\n  process.env.OSTYPE === \"msys\";\n\nconst path = require(\"path\");\nconst COLON = isWindows ? \";\" : \":\";\nconst isexe = require(\"isexe\");\n\nconst getNotFoundError = cmd =>\n  Object.assign(new Error(`not found: ${cmd}`), { code: \"ENOENT\" });\n\nconst getPathInfo = (cmd, opt) => {\n  const colon = opt.colon || COLON;\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  const pathEnv =\n    cmd.match(/\\//) || (isWindows && cmd.match(/\\\\/))\n      ? [\"\"]\n      : [\n          // windows always checks the cwd first\n          ...(isWindows ? [process.cwd()] : []),\n          ...(\n            opt.path ||\n            process.env.PATH ||\n            /* istanbul ignore next: very unusual */ \"\"\n          ).split(colon)\n        ];\n  const pathExtExe = isWindows\n    ? opt.pathExt || process.env.PATHEXT || \".EXE;.CMD;.BAT;.COM\"\n    : \"\";\n  const pathExt = isWindows ? pathExtExe.split(colon) : [\"\"];\n\n  if (isWindows) {\n    if (cmd.indexOf(\".\") !== -1 && pathExt[0] !== \"\") pathExt.unshift(\"\");\n  }\n\n  return {\n    pathEnv,\n    pathExt,\n    pathExtExe\n  };\n};\n\nconst which = (cmd, opt, cb) => {\n  if (typeof opt === \"function\") {\n    cb = opt;\n    opt = {};\n  }\n  if (!opt) opt = {};\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);\n  const found = [];\n\n  const step = i =>\n    new Promise((resolve, reject) => {\n      if (i === pathEnv.length)\n        return opt.all && found.length\n          ? resolve(found)\n          : reject(getNotFoundError(cmd));\n\n      const ppRaw = pathEnv[i];\n      const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;\n\n      const pCmd = path.join(pathPart, cmd);\n      const p =\n        !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;\n\n      resolve(subStep(p, i, 0));\n    });\n\n  const subStep = (p, i, ii) =>\n    new Promise((resolve, reject) => {\n      if (ii === pathExt.length) return resolve(step(i + 1));\n      const ext = pathExt[ii];\n      isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {\n        if (!er && is) {\n          if (opt.all) found.push(p + ext);\n          else return resolve(p + ext);\n        }\n        return resolve(subStep(p, i, ii + 1));\n      });\n    });\n\n  return cb ? step(0).then(res => cb(null, res), cb) : step(0);\n};\n\nconst whichSync = (cmd, opt) => {\n  opt = opt || {};\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);\n  const found = [];\n\n  for (let i = 0; i < pathEnv.length; i++) {\n    const ppRaw = pathEnv[i];\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;\n\n    const pCmd = path.join(pathPart, cmd);\n    const p =\n      !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;\n\n    for (let j = 0; j < pathExt.length; j++) {\n      const cur = p + pathExt[j];\n      try {\n        const is = isexe.sync(cur, { pathExt: pathExtExe });\n        if (is) {\n          if (opt.all) found.push(cur);\n          else return cur;\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length) return found;\n\n  if (opt.nothrow) return null;\n\n  throw getNotFoundError(cmd);\n};\n\nmodule.exports = which;\nwhich.sync = whichSync;\n"],"names":["const","isWindows","process","platform","env","OSTYPE","path","require","COLON","isexe","getNotFoundError","cmd","Object","assign","Error","code","getPathInfo","opt","colon","pathEnv","match","cwd","PATH","split","pathExtExe","pathExt","PATHEXT","indexOf","unshift","which","cb","found","step","i","Promise","resolve","reject","length","all","ppRaw","pathPart","test","slice","pCmd","join","p","subStep","ii","ext","er","is","push","then","res","module","exports","sync","j","cur","ex","nothrow"],"mappings":"AAAAA,IAAMC,EACiB,UAArBC,QAAQC,UACe,WAAvBD,QAAQE,IAAIC,QACW,SAAvBH,QAAQE,IAAIC,OAERC,EAAOC,QAAQ,QACfC,EAAQP,EAAY,IAAM,IAC1BQ,EAAQF,QAAQ,SAEhBG,WAAmBC,UACvBC,OAAOC,OAAO,IAAIC,oBAAoBH,GAAQ,CAAEI,KAAM,YAElDC,WAAeL,EAAKM,OAClBC,EAAQD,EAAIC,OAASV,EAIrBW,EACJR,EAAIS,MAAM,OAAUnB,GAAaU,EAAIS,MAAM,MACvC,CAAC,KAGKnB,EAAY,CAACC,QAAQmB,OAAS,YAEhCJ,EAAIX,MACJJ,QAAQE,IAAIkB,UAEZC,MAAML,IAEVM,EAAavB,EACfgB,EAAIQ,SAAWvB,QAAQE,IAAIsB,SAAW,sBACtC,GACED,EAAUxB,EAAYuB,EAAWD,MAAML,GAAS,CAAC,WAEnDjB,IACwB,IAAtBU,EAAIgB,QAAQ,MAA8B,KAAfF,EAAQ,IAAWA,EAAQG,QAAQ,IAG7D,SACLT,UACAM,aACAD,IAIEK,WAASlB,EAAKM,EAAKa,GACJ,mBAARb,IACTa,EAAKb,EACLA,EAAM,IAEHA,IAAKA,EAAM,UAEyBD,EAAYL,EAAKM,0CACpDc,EAAQ,GAERC,WAAOC,UACX,IAAIC,iBAASC,EAASC,MAChBH,IAAMd,EAAQkB,OAChB,OAAOpB,EAAIqB,KAAOP,EAAMM,OACpBF,EAAQJ,GACRK,EAAO1B,EAAiBC,QAExB4B,EAAQpB,EAAQc,GAChBO,EAAW,SAASC,KAAKF,GAASA,EAAMG,MAAM,GAAI,GAAKH,EAEvDI,EAAOrC,EAAKsC,KAAKJ,EAAU7B,GAC3BkC,GACHL,GAAY,YAAYC,KAAK9B,GAAOA,EAAI+B,MAAM,EAAG,GAAKC,EAAOA,EAEhER,EAAQW,EAAQD,EAAGZ,EAAG,OAGpBa,WAAWD,EAAGZ,EAAGc,UACrB,IAAIb,iBAASC,EAASC,MAChBW,IAAOtB,EAAQY,OAAQ,OAAOF,EAAQH,EAAKC,EAAI,QAC7Ce,EAAMvB,EAAQsB,GACpBtC,EAAMoC,EAAIG,EAAK,CAAEvB,QAASD,YAAeyB,EAAIC,OACtCD,GAAMC,EAAI,KACTjC,EAAIqB,IACH,OAAOH,EAAQU,EAAIG,GADXjB,EAAMoB,KAAKN,EAAIG,UAGvBb,EAAQW,EAAQD,EAAGZ,EAAGc,EAAK,gBAIjCjB,EAAKE,EAAK,GAAGoB,cAAKC,UAAOvB,EAAG,KAAMuB,IAAMvB,GAAME,EAAK,IAoC5DsB,OAAOC,QAAU1B,EACjBA,EAAM2B,cAlCa7C,EAAKM,aAGmBD,EAAYL,EAFrDM,EAAMA,GAAO,2CAGPc,EAAQ,GAELE,EAAI,EAAGA,EAAId,EAAQkB,OAAQJ,YAC5BM,EAAQpB,EAAQc,GAChBO,EAAW,SAASC,KAAKF,GAASA,EAAMG,MAAM,GAAI,GAAKH,EAEvDI,EAAOrC,EAAKsC,KAAKJ,EAAU7B,GAC3BkC,GACHL,GAAY,YAAYC,KAAK9B,GAAOA,EAAI+B,MAAM,EAAG,GAAKC,EAAOA,EAEvDc,EAAI,EAAGA,EAAIhC,EAAQY,OAAQoB,IAAK,KACjCC,EAAMb,EAAIpB,EAAQgC,UAEXhD,EAAM+C,KAAKE,EAAK,CAAEjC,QAASD,IAC9B,KACFP,EAAIqB,IACH,OAAOoB,EADC3B,EAAMoB,KAAKO,IAG1B,MAAOC,QAIT1C,EAAIqB,KAAOP,EAAMM,OAAQ,OAAON,KAEhCd,EAAI2C,QAAS,OAAO,WAElBlD,EAAiBC"}